// Generated from src/Rust.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";


export class RustLexer extends antlr.Lexer {
    public static readonly T__0 = 1;
    public static readonly T__1 = 2;
    public static readonly T__2 = 3;
    public static readonly T__3 = 4;
    public static readonly T__4 = 5;
    public static readonly T__5 = 6;
    public static readonly T__6 = 7;
    public static readonly T__7 = 8;
    public static readonly T__8 = 9;
    public static readonly T__9 = 10;
    public static readonly T__10 = 11;
    public static readonly T__11 = 12;
    public static readonly T__12 = 13;
    public static readonly T__13 = 14;
    public static readonly T__14 = 15;
    public static readonly T__15 = 16;
    public static readonly T__16 = 17;
    public static readonly T__17 = 18;
    public static readonly T__18 = 19;
    public static readonly T__19 = 20;
    public static readonly T__20 = 21;
    public static readonly T__21 = 22;
    public static readonly T__22 = 23;
    public static readonly T__23 = 24;
    public static readonly T__24 = 25;
    public static readonly T__25 = 26;
    public static readonly T__26 = 27;
    public static readonly RETURN = 28;
    public static readonly MUT = 29;
    public static readonly REF = 30;
    public static readonly IDENTIFIER = 31;
    public static readonly INT = 32;
    public static readonly FLOAT = 33;
    public static readonly STRING = 34;
    public static readonly WS = 35;
    public static readonly COMMENT = 36;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];

    public static readonly literalNames = [
        null, "';'", "'let'", "':'", "'='", "'fn'", "'('", "')'", "','", 
        "'->'", "'while'", "'{'", "'}'", "'if'", "'else'", "'-'", "'!'", 
        "'*'", "'+'", "'/'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", 
        "'true'", "'false'", "'return'", "'mut'", "'&'"
    ];

    public static readonly symbolicNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, "RETURN", "MUT", "REF", "IDENTIFIER", 
        "INT", "FLOAT", "STRING", "WS", "COMMENT"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE",
    ];

    public static readonly ruleNames = [
        "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", 
        "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", 
        "T__16", "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", 
        "T__24", "T__25", "T__26", "RETURN", "MUT", "REF", "IDENTIFIER", 
        "INT", "FLOAT", "STRING", "WS", "COMMENT",
    ];


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, RustLexer._ATN, RustLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "Rust.g4"; }

    public get literalNames(): (string | null)[] { return RustLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return RustLexer.symbolicNames; }
    public get ruleNames(): string[] { return RustLexer.ruleNames; }

    public get serializedATN(): number[] { return RustLexer._serializedATN; }

    public get channelNames(): string[] { return RustLexer.channelNames; }

    public get modeNames(): string[] { return RustLexer.modeNames; }

    public static readonly _serializedATN: number[] = [
        4,0,36,216,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,
        1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
        1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,
        1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,
        1,30,1,30,5,30,166,8,30,10,30,12,30,169,9,30,1,31,4,31,172,8,31,
        11,31,12,31,173,1,32,4,32,177,8,32,11,32,12,32,178,1,32,1,32,5,32,
        183,8,32,10,32,12,32,186,9,32,1,33,1,33,1,33,1,33,5,33,192,8,33,
        10,33,12,33,195,9,33,1,33,1,33,1,34,4,34,200,8,34,11,34,12,34,201,
        1,34,1,34,1,35,1,35,1,35,1,35,5,35,210,8,35,10,35,12,35,213,9,35,
        1,35,1,35,0,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,1,0,48,57,2,0,34,34,92,92,3,0,9,10,13,13,32,32,2,0,
        10,10,13,13,223,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,75,1,0,0,0,5,79,1,0,0,0,
        7,81,1,0,0,0,9,83,1,0,0,0,11,86,1,0,0,0,13,88,1,0,0,0,15,90,1,0,
        0,0,17,92,1,0,0,0,19,95,1,0,0,0,21,101,1,0,0,0,23,103,1,0,0,0,25,
        105,1,0,0,0,27,108,1,0,0,0,29,113,1,0,0,0,31,115,1,0,0,0,33,117,
        1,0,0,0,35,119,1,0,0,0,37,121,1,0,0,0,39,123,1,0,0,0,41,126,1,0,
        0,0,43,129,1,0,0,0,45,131,1,0,0,0,47,134,1,0,0,0,49,136,1,0,0,0,
        51,139,1,0,0,0,53,144,1,0,0,0,55,150,1,0,0,0,57,157,1,0,0,0,59,161,
        1,0,0,0,61,163,1,0,0,0,63,171,1,0,0,0,65,176,1,0,0,0,67,187,1,0,
        0,0,69,199,1,0,0,0,71,205,1,0,0,0,73,74,5,59,0,0,74,2,1,0,0,0,75,
        76,5,108,0,0,76,77,5,101,0,0,77,78,5,116,0,0,78,4,1,0,0,0,79,80,
        5,58,0,0,80,6,1,0,0,0,81,82,5,61,0,0,82,8,1,0,0,0,83,84,5,102,0,
        0,84,85,5,110,0,0,85,10,1,0,0,0,86,87,5,40,0,0,87,12,1,0,0,0,88,
        89,5,41,0,0,89,14,1,0,0,0,90,91,5,44,0,0,91,16,1,0,0,0,92,93,5,45,
        0,0,93,94,5,62,0,0,94,18,1,0,0,0,95,96,5,119,0,0,96,97,5,104,0,0,
        97,98,5,105,0,0,98,99,5,108,0,0,99,100,5,101,0,0,100,20,1,0,0,0,
        101,102,5,123,0,0,102,22,1,0,0,0,103,104,5,125,0,0,104,24,1,0,0,
        0,105,106,5,105,0,0,106,107,5,102,0,0,107,26,1,0,0,0,108,109,5,101,
        0,0,109,110,5,108,0,0,110,111,5,115,0,0,111,112,5,101,0,0,112,28,
        1,0,0,0,113,114,5,45,0,0,114,30,1,0,0,0,115,116,5,33,0,0,116,32,
        1,0,0,0,117,118,5,42,0,0,118,34,1,0,0,0,119,120,5,43,0,0,120,36,
        1,0,0,0,121,122,5,47,0,0,122,38,1,0,0,0,123,124,5,61,0,0,124,125,
        5,61,0,0,125,40,1,0,0,0,126,127,5,33,0,0,127,128,5,61,0,0,128,42,
        1,0,0,0,129,130,5,60,0,0,130,44,1,0,0,0,131,132,5,60,0,0,132,133,
        5,61,0,0,133,46,1,0,0,0,134,135,5,62,0,0,135,48,1,0,0,0,136,137,
        5,62,0,0,137,138,5,61,0,0,138,50,1,0,0,0,139,140,5,116,0,0,140,141,
        5,114,0,0,141,142,5,117,0,0,142,143,5,101,0,0,143,52,1,0,0,0,144,
        145,5,102,0,0,145,146,5,97,0,0,146,147,5,108,0,0,147,148,5,115,0,
        0,148,149,5,101,0,0,149,54,1,0,0,0,150,151,5,114,0,0,151,152,5,101,
        0,0,152,153,5,116,0,0,153,154,5,117,0,0,154,155,5,114,0,0,155,156,
        5,110,0,0,156,56,1,0,0,0,157,158,5,109,0,0,158,159,5,117,0,0,159,
        160,5,116,0,0,160,58,1,0,0,0,161,162,5,38,0,0,162,60,1,0,0,0,163,
        167,7,0,0,0,164,166,7,1,0,0,165,164,1,0,0,0,166,169,1,0,0,0,167,
        165,1,0,0,0,167,168,1,0,0,0,168,62,1,0,0,0,169,167,1,0,0,0,170,172,
        7,2,0,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,
        1,0,0,0,174,64,1,0,0,0,175,177,7,2,0,0,176,175,1,0,0,0,177,178,1,
        0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,0,180,184,5,
        46,0,0,181,183,7,2,0,0,182,181,1,0,0,0,183,186,1,0,0,0,184,182,1,
        0,0,0,184,185,1,0,0,0,185,66,1,0,0,0,186,184,1,0,0,0,187,193,5,34,
        0,0,188,192,8,3,0,0,189,190,5,92,0,0,190,192,9,0,0,0,191,188,1,0,
        0,0,191,189,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,
        0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,197,5,34,0,0,197,68,1,0,
        0,0,198,200,7,4,0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,
        0,0,201,202,1,0,0,0,202,203,1,0,0,0,203,204,6,34,0,0,204,70,1,0,
        0,0,205,206,5,47,0,0,206,207,5,47,0,0,207,211,1,0,0,0,208,210,8,
        5,0,0,209,208,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,
        0,0,0,212,214,1,0,0,0,213,211,1,0,0,0,214,215,6,35,0,0,215,72,1,
        0,0,0,9,0,167,173,178,184,191,193,201,211,1,6,0,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!RustLexer.__ATN) {
            RustLexer.__ATN = new antlr.ATNDeserializer().deserialize(RustLexer._serializedATN);
        }

        return RustLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(RustLexer.literalNames, RustLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return RustLexer.vocabulary;
    }

    private static readonly decisionsToDFA = RustLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}